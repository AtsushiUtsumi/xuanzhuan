{#- このテンプレートファイルで使用する変数は最初に定義しておく -#}
{#- あと初めて知ったがハイフンを入れると改行しない、というよりハイフン抜きだと改行コードが出力される、という感じか -#}
{%- set controller_class=table.name | to_upper_camel_case + "DetailController" -%}
{%- set form_class=table.name | to_upper_camel_case + "DetailForm" -%}
package {{package}};

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

@SpringBootTest
@AutoConfigureMockMvc
public class {{controller_class}}Test {

    @Autowired
    private {{controller_class}} target;

    private MockMvc mockMvc;

    // 正常系用サンプルデータインスタンス生成
    private {{form_class}} createSample() {
        {{form_class}} sample = new {{form_class}}();
        // sample.set{{table.name | to_upper_camel_case}}Id(777);
        // sample.set{{table.name | to_upper_camel_case}}Name("FUGA");
        return sample;
    }

    // 入力チェック
    private boolean inputCheck({{form_class}} form) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {

        Method method = {{table.name | to_upper_camel_case}}DetailController.class.getDeclaredMethod("inputCheck", {{form_class}}.class);
        method.setAccessible(true);
        final boolean result = (boolean) method.invoke(target, form);

        return result;
    }

    @Test
    public void 初期表示() throws Exception {
        mockMvc = MockMvcBuilders.standaloneSetup(target).build();
        mockMvc.perform(MockMvcRequestBuilders.get("/{{table.name | to_lower_camel_case}}/edit"))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.view().name("{{table.name | to_lower_camel_case}}/{{table.name | to_lower_camel_case}}Edit"));
    }

    @Test
    public void 入力チェック() throws NoSuchMethodException, SecurityException, IllegalAccessException,
            IllegalArgumentException, InvocationTargetException {

        final boolean actual = this.inputCheck(this.createSample());

        assert (actual == true);
    }
}

